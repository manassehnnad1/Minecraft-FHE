/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AgeVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getEncryptedAge"
      | "protocolId"
      | "verifyAge"
      | "verifyAgeMock"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AgeVerified"): EventFragment;

  encodeFunctionData(
    functionFragment: "getEncryptedAge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAge",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAgeMock",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEncryptedAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyAge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAgeMock",
    data: BytesLike
  ): Result;
}

export namespace AgeVerifiedEvent {
  export type InputTuple = [user: AddressLike, isOldEnough: boolean];
  export type OutputTuple = [user: string, isOldEnough: boolean];
  export interface OutputObject {
    user: string;
    isOldEnough: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgeVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): AgeVerifier;
  waitForDeployment(): Promise<this>;

  interface: AgeVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getEncryptedAge: TypedContractMethod<[user: AddressLike], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  verifyAge: TypedContractMethod<
    [inputEuint32: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  verifyAgeMock: TypedContractMethod<[age: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getEncryptedAge"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyAge"
  ): TypedContractMethod<
    [inputEuint32: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyAgeMock"
  ): TypedContractMethod<[age: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AgeVerified"
  ): TypedContractEvent<
    AgeVerifiedEvent.InputTuple,
    AgeVerifiedEvent.OutputTuple,
    AgeVerifiedEvent.OutputObject
  >;

  filters: {
    "AgeVerified(address,bool)": TypedContractEvent<
      AgeVerifiedEvent.InputTuple,
      AgeVerifiedEvent.OutputTuple,
      AgeVerifiedEvent.OutputObject
    >;
    AgeVerified: TypedContractEvent<
      AgeVerifiedEvent.InputTuple,
      AgeVerifiedEvent.OutputTuple,
      AgeVerifiedEvent.OutputObject
    >;
  };
}
